#
# cisco telemetry codec
#
# This file is staged into the ../staging directory, updated according
# to setup in ../environment, and copied into the host volume for
# logstash (under $LOGSTASH_VOLUME/conf.d). File can be edited there
# but will be overwritten if container is rebuilt.
#
#
input {
    tcp {
	port => TELEMETRYPORTTCP_PLACEHOLDER
	codec => telemetry {
	    
	    mdt => true
	    ########
	    ###  support for json message	
	    xform => "flat" 
	    xform_flat_delimeter => "~"
	    xform_flat_keys => [
		#### format 1
		'interfacesPre601', 'RootOper~Interfaces~(?<InterfaceName>.*)',
		'ipslastatsPre601', 'RootOper~IPSLA~OperationData~(?<operation>\d+)~Statistics',
		'ipslacommonPre601', 'RootOper~IPSLA~OperationData~(?<operation>\d+)~Common',
		'countersPre601', 'RootOper~InfraStatistics~(?<InterfaceName>.*)~Latest~GenericCounters',
                'dataratesPre601', 'RootOper~InfraStatistics~(?<InterfaceName>.*)~Latest~DataRate',
		'ipaddressPre601', 'RootOper~IPV4ARM~Addresses~(?<VRFName>.*)~(?<InterfaceName>.*)',
		'labelcontextPre601', 'RootOper~MPLS_LSD~(?<label>\d+)',
		'labelspecialPre601', 'RootOper~MPLS_LSD~Label',
		'fiblabelPre601', 'RootOper~FIB_MPLS~(?<card>.*)~LabelFIB~(?<label>\d+)~(?<EOS>EOS\d)',
		'fibprefixv4Pre601', 'RootOper~FIB~(?<card>.*)~IPv4~(?<vrf>.*)~(?<pfx>.*)~(?<len>\d+)',
		'fibprefixv6Pre601', 'RootOper~FIB~(?<card>.*)~IPv6~(?<vrf>.*)~(?<pfx>.*)~(?<len>\d+)',
		'fibprefixmplsPre601', 'RootOper~FIB~(?<card>.*)~MPLS~(?<vrf>.*)~(?<pfx>.*)~(?<len>\d+)',
		'ribprefixPre601', 'RootOper~RIB~(?<vrf>.*)~IPv4~Unicast~default~(?<pfx>.*)~(?<len>\d+)~-~-',
		'mplstesummaryPre601', 'RootOper~MPLS_TE~Tunnels~Summary',
		'mplstetopologyPre601', 'RootOper~MPLS_TE~Topology',
		'mplsteautoroutePre601', 'RootOper~MPLS_TE~AnnounceTunnelsInfo~AutorouteAnnounceTable~(?<RouterID>.*)~(?<Protocol>.*)~(?<Area>\d+)~(?<Instance>.*)',

		### format 2        
		'interfaces', 'RootOper~Interfaces~Interface~(?<InterfaceName>.*)',
		'ipslastats', 'RootOper~IPSLA~OperationData~Operation~(?<operation>\d+)~Statistics',
		'ipslacommon', 'RootOper~IPSLA~OperationData~Operation~(?<operation>\d+)~Common',
		'counters', 'RootOper~InfraStatistics~Interface~(?<InterfaceName>.*)~Latest~GenericCounters',
                'datarates', 'RootOper~InfraStatistics~Interface~(?<InterfaceName>.*)~Latest~DataRate',
		'ipaddress', 'RootOper~IPV4ARM~Addresses~VRF~(?<VRFName>.*)~Interfaces~(?<InterfaceName>.*)',
		'labelcontext', 'RootOper~MPLS_LSD~Label~(?<label>\d+)',
		'labelspecial', 'RootOper~MPLS_LSD~Label',
		'fiblabel', 'RootOper~FIB_MPLS~Card~(?<card>.*)~LabelFIB~Label~(?<label>\d+)~EOS~(?<EOS>EOS\d)',
		'fibprefixv4', 'RootOper~FIB~Card~(?<card>.*)~IPv4~Vrf~(?<vrf>.*)~Pfx~(?<pfx>.*)~Len~(?<len>\d+)',
		'fibprefixv6', 'RootOper~FIB~Card~(?<card>.*)~IPv6~Vrf~(?<vrf>.*)~Pfx~(?<pfx>.*)~Len~(?<len>\d+)',
		'fibprefixmpls', 'RootOper~FIB~Card~(?<card>.*)~MPLS~Vrf~(?<vrf>.*)~Pfx~(?<pfx>.*)~Len~(?<len>\d+)',
		'ribprefix', 'RootOper~RIB~Vrf~(?<vrf>.*)~IPv4~Unicast~default~Pfx~(?<pfx>.*)~Len~(?<len>\d+)~-~-',
		'mplstesummary', 'RootOper~MPLS_TE~Tunnels~Summary',
		'mplstetopology', 'RootOper~MPLS_TE~Topology',
		'mplsteautoroute', 'RootOper~MPLS_TE~AnnounceTunnelsInfo~AutorouteAnnounceTable~RouterID~(?<RouterID>.*)~Protocol~(?<Protocol>.*)~Area~(?<Area>\d+)~Instance~(?<Instance>.*)']
	      #
	      ##########
	      ### support for gpb and gpb_kv
	      protofiles => "/data/proto"
	}
    }
    udp {
	port => TELEMETRYPORTUDP_PLACEHOLDER
	codec => telemetry_gpb {

	      ############
	      #### support only for gpb
	      #
	      # 'protofiles' specified path for directory holding:
	      #
	      # .proto files as generated on router, and post-processed
	      # .pb.rb generated ruby bindings for the samen
	      #
	      # e.g. protofiles => "/data/proto"
	      #
	      # If you do not plan to make backward incompatible
              # changes to the .proto file, you can also simply use
              # the full version on this side safe in the knowledge
              # that it will be able to read any subset you wish to
              # generate.
	      #
	      # In order to generate the Ruby bindings you will need
	      # to use a protocol compiler which supports Ruby
	      # bindings for proto2 (e.g. ruby-protocol-buffer gem)
	      #
	      protofiles => "/data/proto"
	}
    }
}

output {
    #
    # elasticsearch options documented here: www.elastic.io. With 2.0,
    # we default to using http, and must therefore use the client
    # port.
    #
    elasticsearch {
	hosts => "ELASTICSEARCHHOST_PLACEHOLDER:ELASTICSEARCHPORT_CLIENT_PLACEHOLDER"
    }

    #
    # Uncomment the following if you wish to attach to
    # container and watch updates go by.
    #
    # stdout {codec => rubydebug}
    #
}
